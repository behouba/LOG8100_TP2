name: "CI/CD pipeline"

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build Docker images using Docker Compose
      - name: Build Docker images with Docker Compose
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml push
          
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          
  sonarCloud_scan:
    runs-on: ubuntu-latest
    needs: build  # This job will run only after the 'build' job completes
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=naabda92_LOG8100_TP2
            -Dsonar.organization=naabda92
            #-Dsonar.sources=.
            #-Dsonar.scm.provider=git
            #-Dsonar.verbose=true
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .
          
  #-deploy:
  #-  runs-on: ubuntu-latest

  #-  steps:
 #-     - name: Checkout code
  #-      uses: actions/checkout@v4

#-      - name: Set up Azure CLI
  #-      uses: azure/setup-azure-cli@v2
#-        with:
#-          azure-cli-version: '2.x'
#-
#-      - name: Login to Azure
#-        run: |
#-          echo "${{ secrets.AZURE_CLIENT_SECRET }}" | az login --service-principal -u "${{ secrets.AZURE_CLIENT_ID }}" -p - --tenant "${{ secrets.AZURE_TENANT_ID }}"
#-
#-      - name: Create Azure Resource Group (if not exists)
#-        run: |
#-          az group create --name "${{ secrets.AZURE_RESOURCE_GROUP }}" --location "Canada Central"
#-
#-      - name: Create Azure Container Instance
#-        run: |
#-          az container create \
#-            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
#-            --name "${{ secrets.AZURE_CONTAINER_NAME }}" \
#-            --image "${{ secrets.DOCKER_IMAGE }}" \
#-            --cpu 1 \
#-            --memory 1.5 \
#-            --ports 80 9090 \
#-            --restart-policy OnFailure
#-
#-      - name: Logout from Azure
#-        run: az logout
        
        
  zap_scan:
    runs-on: ubuntu-latest
    name: Zap scanning
    needs: sonarCloud_scan  # This job will run only after the 'build' job completes
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          target: 'http://log8100-tp210.eastus.azurecontainer.io:9090/'
          cmd_options: '-a -j'
          report: 'zap_report.html'  # Specify the report output
          json_report: 'zap_report.json'  # Specify the JSON report output (if supported)
          
      - name: Check if report files exist
       run: |
         ls -l  # This will list files in the current directory

  # Upload the ZAP report as an artifact
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html  # Specify the path of the ZAP report file
         
    # Upload the ZAP JSON report as an artifact
      - name: Upload ZAP JSON report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report-json
          path: zap_report.json  # Specify the path of the ZAP JSON report file
